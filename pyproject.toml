[build-system]
requires = [
  "setuptools >= 61",
  "setuptools_scm[toml] >= 8",
]
build-backend = 'setuptools.build_meta'

[project]
name="NREL-gaps"
dynamic = ["version"]
description = "National Renewable Energy Laboratory's (NREL's) Geospatial Analysis Pipelines (GAPs) framework"
readme = "README.rst"
authors = [
  {name = "Paul Pinchuk", email = "ppinchuk@nrel.gov"},
]
maintainers = [
  {name = "Paul Pinchuk", email = "ppinchuk@nrel.gov"},
  {name = "Grant Buster", email = "gbuster@nrel.gov"},
]
license = {text = "BSD-3-Clause"}
keywords = ["gaps", "NREL"]
requires-python = ">= 3.8"
classifiers=[
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
  "click>=8.1.8,<9",
  "colorama>=0.4.6,<0.5",
  "NREL-rex==0.2.97",
  "numpy>=1.20,<2.0",
  "numpydoc>=1.7.0,<2",
  "pandas>=2.0.3,<3",
  "psutil>=7.0.0,<8",
  "pyjson5>=1.6.4,<2",
  "pyyaml>=6.0.2,<7",
  "setuptools>=65.4.0",
  "sphinx>=7.1.2,<9",
  "sphinx-click>=6.0.0,<7",
  "sphinx-copybutton>=0.5.2,<0.6",
  "sphinx-tabs>=3.4.1,<4",
  "sphinxcontrib-mermaid>=1.0.0,<2",
  "tabulate>=0.9.0,<0.10",
  "toml>=0.10.2,<0.11",
]

[project.optional-dependencies]
dev = [
  "ipython>=8.12.3,<10",
  "jupyter>=1.0.0,<1.1",
  "pipreqs>=0.4.13,<0.5",
  "ruff>=0.8.0,<0.9",
]
test = [
  "flaky>=3.8.1,<4",
  "h5py>=3.10",
  "pytest>=7.0",
  "pytest-cases>=3.8.6,<4",
  "pytest-cov>=3.0",
  "pytest-profiling>=1.7.0,<2",
  "pytest-xdist>=3.0",
  "snakeviz>=2.2.0,<3",
  "tox>=4.0",
]
doc = [
  "ghp-import>=2.1",
  "numpydoc>=1.6",
  "make>=0.1",
  "myst-parser>=3.0.1",
  "pandoc>=2.3",
  "pydata-sphinx-theme>=0.15",
]
build = [
  "build>=0.10",
  "twine>=5.1.1,<6",
]


[project.urls]
homepage = "https://github.com/NREL/gaps"
documentation = "https://nrel.github.io/gaps/"
repository = "https://github.com/NREL/gaps"

[project.scripts]
gaps = "gaps._cli:main"


[tool.setuptools.dynamic]
version = {attr = "gaps.version.__version__"}


[tool.pixi.project]
channels = ["conda-forge", "anaconda", "main"]
platforms = ["osx-arm64", "osx-64", "linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
NREL-rex = "==0.2.97"
NREL-gaps = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev", "doc", "test", "build"], solve-group = "default" }
doc = { features = ["doc"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
build = { features = ["build"], solve-group = "default" }

[tool.pixi.tasks]


[tool.pixi.feature.test.tasks]
test = "pytest --durations=20 tests"

[tool.pixi.feature.doc.tasks]
make-html = { cmd = "make html", cwd = "docs"}

[tool.pixi.dependencies]
python = ">=3.8"
click = ">=8.1.8,<9"
colorama = ">=0.4.6,<0.5"
numpy = ">=1.20,<2.0"
numpydoc = ">=1.7.0,<2"
pandas = ">=2.0.3,<3"
psutil = ">=7.0.0,<8"
pyyaml = ">=6.0.2,<7"
setuptools = ">=65.4.0,<76"
sphinx = ">=7.1.2,<9"
sphinx-click = ">=6.0.0,<7"
sphinx-copybutton = ">=0.5.2,<0.6"
sphinx-tabs = ">=3.4.1,<4"
sphinxcontrib-mermaid = ">=1.0.0,<2"
tabulate = ">=0.9.0,<0.10"
toml = ">=0.10.2,<0.11"

[tool.pixi.feature.dev.dependencies]
ipython = ">=8.12.3,<10"
jupyter = ">=1.0.0,<1.1"
pipreqs = ">=0.4.13,<0.5"
ruff = ">=0.8.0,<0.9"

[tool.pixi.feature.test.dependencies]
flaky = ">=3.8.1,<4"
h5py = ">=3.12.1,<4"
pytest = ">=8.3.3,<9"
pytest-cases = ">=3.8.6,<4"
pytest-cov = ">=6.0.0,<7"
pytest-xdist = ">=3.6.1,<4"
snakeviz = ">=2.2.0,<3"
tox = ">=4.23.2,<5"

[tool.pixi.feature.doc.dependencies]
ghp-import = ">=2.1.0,<3"
numpydoc = ">=1.8.0,<2"
make = ">=4.4.1,<5"
myst-parser = ">=4.0.0"
pandoc = ">=3.5,<4"
pydata-sphinx-theme = ">=0.15"

[tool.pixi.feature.build.dependencies]
twine = ">=5.1.1,<6"


[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "if self\\.debug",

  # Don't complain about repr methods
  "def __repr__",
  "def _repr_markdown_",

  # Don't complain about data I/O code
  "def load*",
  "def _load*",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",

  # Don't complain about logging debugging functions
  "def print_logging_info*",
  "def __cls_name",
]

omit = [
  # omit test files
  "tests/*",
  # omit init files
  "__init__.py",
  # omit version file
  "_version.py",
  # omit pixi files
  ".pixi/*",
]


[tool.pytest.ini_options]
addopts = "--cov=gaps --cov-report=html --cov-report=xml:coverage.xml --disable-warnings --cov-fail-under=95"
testpaths = ["tests"]
